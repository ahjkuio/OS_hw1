Работа по заданию:

UPROGS=\
    ...
    $U/_task1\
    $U/_task2\
    $U/_task3\

1) // task1 - вариант(a); "task1 1" - вариант (b)

Условия:
СП Д/З No1 Процессы и межпроцессное взаимоде пользовательском пространстве
Операционные системы, весна 2024

Задача 1. Написать тестовую программу, выполняющую следующие действия.
- Создается дочерний процесс, который приостанавливается на несколько (5-15) секунд и завершается с кодов возврата 1.
- Родительский процесс выводит свой идентификатор и идентификатор дочернего процесса, затем (а) просто ожидает завершения дочернего процесса, после чего выводит идентификатор завершенного процесса и его код возврата, затем сам завершается (b) сначала дочернему процессу сигнал kill, после чего ожидает его завершения, выводит идентификатор завершенного процесса и код возврата, затем сам завершается (варианты можно реализовать, например, с помощью различных опций запуска или как два тестовых приложения).

В варианте (а) протестировать запуск приложения в виде фонового процесса оболочки и отправку сигнала дочернему процессу с помощью команды кі11, не дожидаясь его завершения по тайм-ауту.

Задача 2. Написать программу, которая создает дочерний процесс и передает ему через заранее созданный анонимный канал (pipe) все аргументы командной строки, завершая их символом перевода строки '\n', закрывает канал по завершении записи. Дочерний процесс получает данные из канала и выводит их на стандартный вывод, после чего завершается. Родительский процесс ожидает завершение дочернего процесса и завершается сам.

Задача 3. Написать программу, которая создает дочерний процесс и передает ему через заранее созданный анонимный канал ( ріре ) все аргументы командной строки, завершая их символом перевода строки '\n', закрывает канал по завершении записи. Дочерний процесс замещает стандартный ввод (0) выходным концом канала (рipefd[0]) с помощью dup:

close(0);
dup(pipefd[0]);

после чего канал может быть закрыт

close(pipefd[0]);

Далее дочерний процесс замещается приложением wc
char *argv[] = {"/wc", 0);
exec("/wc", argv);

Программа wc должна вывести подсчет строк (количества аргументов командной строки), слов и байтов в них. Родительский процесс ожидает завершение дочернего процесса и завершается сам.
NB. Хотя ОС при завершении процесса должна закрыть все открытые файловые дескрипторы, рекомендуется закрывать неиспользуемые концы канала. Кроме того, следует проверять на ошибки сист. вызовов, и не допускать неопределенного поведения, в т.ч. при создании процессов, каналов, вызова ехес, чтении и записи, в т.ч. вызова close после записи, т.к. нарушения в работе (например, аппаратные для файлового вывода, или программный обрые канала pipe по каким-либо причинам могут привести к тому, что не все данные будут записаны/переданы.

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
